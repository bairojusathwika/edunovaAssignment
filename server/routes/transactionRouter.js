const express= require('express');

const Book = require('../schema/book');
const User = require('../routes/userRoute')
const Transaction = require('../schema/transaction');
const router = express.Router();

// INPUT - Book name
// OUTPUT - List of people who have issued that book in the past ( total
// count), the person who currently has that book issued ( currently issued
// only) or status of not issued at the moment.

router.post('/transactions/issue', async (req, res) => {
    const { book_id, _userid, time_issued } = req.body;
  
    // Ensure book and user exist
    const book = await Book.findById(book_id);
    const user = await User.findById(_userid);
    if (!book || !user) return res.status(400).json({ error: 'Invalid book or user' });
  
    const transaction = new Transaction({
      book: book_id,
      user: _userid,
      issueDate: new Date(time_issued)
    });
    await transaction.save();
    res.status(201).json(transaction);
  });
  
// INPUT - book name + person name/_userid + return date (BOOK IS
// RETURNED)
// OUTPUT - calculate rent based on issue date and return date and update
// the transaction DB with these values.

  router.post('/transactions/return', async (req, res) => {
    const { book_id, _userid, time_returned } = req.body;
  
    const transaction = await Transaction.findOne({ book: book_id, user: _userid, time_returned: null });
    if (!transaction) return res.status(400).json({ error: 'No ongoing transaction for this book and user' });
  
    const issueDate = transaction.issueDate;
    const diffInDays = Math.ceil((new Date(time_returned) - issueDate) / (1000 * 60 * 60 * 24));
    const rent = diffInDays * (await Book.findById(book_id)).rentPerDay;
  
    transaction.time_returned = new Date(time_returned);
    transaction.rent = rent;
    await transaction.save();
  
    res.json({ rent, transaction });
  });

  // INPUT - Book name
// OUTPUT - Total rent generated by that book.
router.get('/transactions/book-rent/:book_id', async (req, res) => {
  const { book_id } = req.params;
  const transactions = await Transaction.find({ book: book_id });
  const totalRent = transactions.reduce((sum, transaction) => sum + (transaction.rent || 0), 0);
  res.json({ totalRent });
});

// INPUT - Personâ€™s name/_userid
// OUTPUT - List of books issued to that person
router.get('/transactions/user/:_userid', async (req, res) => {
  const { _userid } = req.params;
  const transactions = await Transaction.find({ user: _userid }).populate('book');
  res.json(transactions);
});


// INPUT - Date range
// OUTPUT - list of books issued in that date range and the person they are
// issued to

router.get('/transactions/date-range', async (req, res) => {
  const { startDate, endDate } = req.query;
  const transactions = await Transaction.find({
    issueDate: { $gte: new Date(startDate), $lte: new Date(endDate) }
  }).populate('book user');
  res.json(transactions);
});


module.exports = router;